const OpenAI = require("openai");
const dotenv = require("dotenv");
dotenv.config();

//vari√°veis de controle do cliente//
const {controlClient, messages, serviceHours} = require('../utils/controlClient');

//Importando banco de dados do Cliente//
const dbClient = require('../models/Client');

const {rulesCache, menuCache, deliveryCahe} = require('../data/dataLoader');//sincroniza os dados do banco em cache local//

//Importando fun√ß√µes de l√≥gica de processamento//
const {saveName, saveAddress, calculateOrder} = require('../services/clienteService');

//Importando fun√ß√µes de chamada para o modelo GPT//
const tools = require('../tools/tools');

// Configura√ß√£o da API//
const openai = new OpenAI({
    apiKey:process.env.OPENAI_API_KEY//Chave de API//
});

// Fun√ß√£o de chamada chatbot//
async function gpt(message_body, phone) {

  if(!serviceHours()){//Verifica se est√° no hor√°rio de atendimento//
    return"üî¥ *Estamos Fechados!* üî¥\n\nAtendemos de  *Segunda* a *S√°bado* das *18:00* √†s *22:50*";
  }

  if(!messages.has(phone)){
    messages.set(phone,[]);
    messages.get(phone).push(...rulesCache);//grava regras de atendimento nos parametros do chatbot//
    messages.get(phone).push(...menuCache);//grava o conte√∫do do card√°pio nos parametros do chatbot//
    messages.get(phone).push(...deliveryCahe);//grava a lista de bairros que a loja entrega nos parametros do chatbot//
    const client = await dbClient.findOne({phone});

    messages.get(phone).push({role: "system", content:`Este √© o telefone do cliente: ${phone}`});
    
    if(client.name){
      messages.get(phone).push({role: "system", content:`O nome do cliente √©: ${client.name}`});
    }else{
      messages.get(phone).push({role: "system", content:`Pergunte o nome do cliente antes de inicar o antedimento e chame a fun√ß√£o saveName passando como parametro o nome e o telefone do cliente.`});
    }

    if(client.address?.location.lat && client.address?.location.long){
      messages.get(phone).push({role: "system", content:`A localiza√ß√£o do cliente √©: https://maps.google.com/?q=${client.address.location.lat},${client.address.location.long}`});
    }else{
      messages.get(phone).push({role: "system", content:`A localiza√ß√£o do cliente n√£o est√° registrada no sistema.`});
    }

    if(client.address.address_write){
      messages.get(phone).push({role: "system", content:`O endere√ßo do cliente √©: ${client.address.address_write}`});

      messages.get(phone).push({role: "system", content:`Caso o pedido seja para Entrega, pergunte ao cliente se o endere√ßo registrado est√° correto. Se o endere√ßo estiver correto seiga o atendimento normalmente.`});

      messages.get(phone).push({role: "system", content:`Se o cliente quiser alterar o endere√ßo de entrega, pe√ßa para que o cliente envie o novo endere√ßo por escrito, ap√≥s isso reescreva o novo endere√ßo do cliente e pa√ßa para que ele confirme, com o novo endere√ßo confirmado chame a fun√ß√£o saveAddress passando como parametro o novo endere√ßo e o telefone do cliente.`});

    }else{
      messages.get(phone).push({role: "system", content:`O endere√ßo do cliente ainda n√£o est√° registrado no sistema.`});
    }
  };

  messages.get(phone).push({role: "user", content:message_body}); //grava a mensagem do cliente no hist√≥rico//

  try{
    const completion = await openai.chat.completions.create({
        model: "gpt-4o",       //modelo gpt usado no atendimento
        temperature: 0.3,      // Menos aleat√≥rio, mais focado
        top_p: 0.5,            // Garantindo diversidade controlada
        presence_penalty: 1.0, // Menos desvio para t√≥picos irrelevantes
        max_tokens: 300,       // Respostas detalhadas, mas n√£o excessivas
        messages: messages.get(phone),    //mensagens e parametros de funcionamento//
        tools: tools
    });

    const responseGpt = completion.choices[0].message.content; //salva a resposta do GPT//

    if(completion.choices[0].message?.content){//Resposta padr√£o em texto//
        messages.get(phone).push({role: "assistant", content:responseGpt}); //grava a resosta do chatbot no hist√≥rico//
        
    }if(completion.choices[0].message?.tool_calls){//Verifica se o GPT fez alguma chamada de fun√ß√£o//
      const tool_calls = completion.choices[0].message.tool_calls; //captura a chamda de fun√ß√£o//

      for(const tool_call of tool_calls){
        const function_name = tool_call.function.name; // captura o nome da fun√ß√£o chamada//
        const argumentsJSON = tool_call.function.arguments;//argumentos que comp√µe a fun√ß√£o//

        try {
          if(function_name === "saveName"){
            console.log("Chamando fun√ß√£o Salvar Nome!");
            const arguments = JSON.parse(argumentsJSON);
    
            await saveName(arguments.name, arguments.phone);
    
            messages.get(phone).push({role: "system", content:`Nome do cliente: ${arguments.name} salvo no banco de dados com sucesso!`}); 
    
            return `#saveName`;
    
          }else if(function_name === "saveAddress"){
            console.log("Chamando fun√ß√£o Salvar Endere√ßo!");
            const arguments = JSON.parse(argumentsJSON);
    
            await saveAddress(arguments.address_write, arguments.phone);
            
            messages.get(phone).push({role: "system", content:`Novo endere√ßo cadastrado com sucesso: ${arguments.address_write}`}); 
    
            return `#saveAddress`;
    
          }else if(function_name === "registerOrder"){
            console.log("Chamando fun√ß√£o para registrar pedido!");
            const arguments = JSON.parse(argumentsJSON);
            
            //criando objeto com dados do cliente//
            const dataClient = {
              name:arguments.name,
              phone:arguments.phone,
              address:arguments.address_write,
              location: arguments.location,
              note_order:arguments.note_order,
              payment:arguments.payment,
              type_order:arguments.type_order
            };

            const detalhes = await calculateOrder(arguments.items, dataClient);

            messages.get(phone).push({role: "system", content:`Pedido registrado com sucesso no sistema!`}); 
             
            if(controlClient.has(phone)){//desativa o chatbot ap√≥s registrar o pedido do cliente//
              controlClient.set(phone,false);
            }

            return detalhes; //retorna o pedido organizado//
          }

        } catch (error) {
          console.log(`Erro ao processar chamada de fun√ß√£o: ${function_name}`);
          return `Erro ao enviar pedido para o sistema.`
        }
      }
    }
    return responseGpt; //retornar a mensagem gerada pelo GPT//      
  } catch (error) {
    console.error("Erro ao acessar a API:", error.response?.data || error.message);
    return `Erro ao processar resposta!`;
  }
};

module.exports = gpt;